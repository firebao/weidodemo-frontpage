<template>
  <div class="wrap" v-show="visible">
    <div class="dialog-mask" @click="handleWrapClick"></div>
    <div class="dialog-wrap flex h-middle v-middle">
      <div class="dialog" :style="widthStyle">
        <div class="dialog-content" :style="widthStyle">
          <a class="dialog-close" v-if="closable" @click="close">
            <slot name="close">
              <icon-svg class="w40" icon-class="close"></icon-svg>
            </slot>
          </a>
          <div class="dialog-header" v-if="showHead">
            <slot name="header">
              <div class="header-inner">
                {{ title }}
              </div>
            </slot>
          </div>
          <div class="dialog-body">
            <slot></slot>
          </div>
          <div class="dialog-footer" v-if="!footerHide">
            <slot name="footer">
              <button @click="cancel">{{ cancelText }}</button>
              <button @click="ok">{{ okText }}</button>
            </slot>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
export default {
  name: "BaseDialog",
  props: {
    value: {
      type: Boolean,
      default: false
    },
    closable: {
      type: Boolean,
      default: true
    },
    title: {
      type: String
    },
    okText: {
      type: String
    },
    cancelText: {
      type: String
    },
    footerHide: {
      type: Boolean,
      default: false
    },
    showHead: {
      type: Boolean,
      default: true
    },
    width: {
      type: [Number, String],
      default: 520
    }
  },
  data: function() {
    return {
      visible: this.value
    };
  },
  watch: {
    value: function(val) {
      this.visible = val;
    }
  },
  computed: {
    widthStyle: function() {
      let style = {};
      const width = parseInt(this.width);
      style = { width: width <= 100 ? `${width}%` : `${width}px` };
      return style;
    }
  },
  methods: {
    close: function() {
      this.visible = false;
      this.$emit("input", false);
      this.$emit("on-cacel");
    },
    handleWrapClick: function() {
      this.close();
    },
    cancel: function() {
      this.close();
    },
    ok: function() {
      this.visible = false;
      this.$emit("input", false);
      this.$emit("on-ok");
    }
  }
};
</script>
<style scoped lang="scss">
@import "@/assets/css/base.scss";
.wrap {
  .dialog-mask {
    position: fixed;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
    height: 100%;
    background-color: rgba(55, 55, 55, 0.6);
  }
  .dialog-wrap {
    position: fixed;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
    overflow: auto;
    .dialog {
      display: flex;
      margin: 0 auto;
      position: relative;
      .dialog-content {
        position: relative;
        background-color: $bg-color;
        opacity: 0.75;
        border: 0;
        border-radius: 5px;
        background-clip: padding-box;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        .dialog-header {
          height: 55px;
          display: flex;
          .header-inner {
            font-size: 20px;
            margin: 30px auto 0;
            font-weight: 600;
          }
        }
        .dialog-close {
          z-index: 1;
          position: asolute;
          right: 8px;
          top: 8px;
          overflow: hidden;
          cursor: pointer;
        }
        .dialog-body {
          margin: 20px auto;
        }
      }
    }
  }
}
</style>
